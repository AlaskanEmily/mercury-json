 Orig. Term: -561
       JSON: -561
Result Term: -561

 Orig. Term: 0
       JSON: 0
Result Term: 0

 Orig. Term: 561
       JSON: 561
Result Term: 561

 Orig. Term: 
       JSON: ""
Result Term: 

 Orig. Term: aaabbbccc
       JSON: "aaabbbccc"
Result Term: aaabbbccc

 Orig. Term: ûń
       JSON: "\u00fb\u0144"
Result Term: ûń

 Orig. Term: 3.141
       JSON: 3.141
Result Term: 3.141

 Orig. Term: infinity
       JSON: error: cannot convert non-finite float to JSON

 Orig. Term: A
       JSON: "A"
Result Term: A

 Orig. Term: no
       JSON: false
Result Term: no

 Orig. Term: yes
       JSON: true
Result Term: yes

 Orig. Term: 2365712637126347861237846728356712647827834723847812937812734871293478127
       JSON: "2365712637126347861237846728356712647827834723847812937812734871293478127"
Result Term: 2365712637126347861237846728356712647827834723847812937812734871293478127

 Orig. Term: 2000-02-18 19:30:00
       JSON: "2000-02-18 19:30:00"
Result Term: 2000-02-18 19:30:00

 Orig. Term: 2013-03-02 20:30:11.000123
       JSON: "2013-03-02 20:30:11.000123"
Result Term: 2013-03-02 20:30:11.000123

 Orig. Term: P0D
       JSON: "P0D"
Result Term: P0D

 Orig. Term: [1, 2, 3]
       JSON: [1,2,3]
Result Term: [1, 2, 3]

 Orig. Term: apple
       JSON: "apple"
Result Term: apple

 Orig. Term: pear
       JSON: "pear"
Result Term: pear

 Orig. Term: [apple, orange, lemon, pear]
       JSON: ["apple","orange","lemon","pear"]
Result Term: [apple, orange, lemon, pear]

 Orig. Term: foo(1, 2, 3)
       JSON: {"args":[1,2,3],"functor":"foo"}
Result Term: foo(1, 2, 3)

 Orig. Term: bar([1, 2, 3], 4)
       JSON: {"args":[[1,2,3],4],"functor":"bar"}
Result Term: bar([1, 2, 3], 4)

 Orig. Term: baaz
       JSON: {"functor":"baaz"}
Result Term: baaz

 Orig. Term: poly1
       JSON: {"functor":"poly1"}
Result Term: poly1

 Orig. Term: poly2(lemon)
       JSON: {"args":["lemon"],"functor":"poly2"}
Result Term: poly2(lemon)

 Orig. Term: poly3(apple, orange)
       JSON: {"args":["apple","orange"],"functor":"poly3"}
Result Term: poly3(apple, orange)

 Orig. Term: 561
       JSON: {"args":[561],"functor":"univ_cons"}
Result Term: error: univ_cons/1 is not a ground functor

 Orig. Term: '<<foreign>>'
       JSON: error: cannot convert type 'test_marshal.foreign'/0 to JSON

 Orig. Term: existq1
       JSON: {"functor":"existq1"}
Result Term: existq1

 Orig. Term: existq2(561)
       JSON: {"args":[561],"functor":"existq2"}
Result Term: existq2(561)

 Orig. Term: existq3(561)
       JSON: {"args":[561],"functor":"existq3"}
Result Term: error: existq3/1 is not a ground functor

 Orig. Term: yes("foo")
       JSON: "foo"
Result Term: yes("foo")

 Orig. Term: no
       JSON: null
Result Term: no

 Orig. Term: apple - orange
       JSON: {"fst":"apple","snd":"orange"}
Result Term: apple - orange

 Orig. Term: [1, 2, 3] - [apple, orange, pear]
       JSON: {"fst":[1,2,3],"snd":["apple","orange","pear"]}
Result Term: [1, 2, 3] - [apple, orange, pear]

 Orig. Term: ok(pear)
       JSON: {"args":["pear"],"functor":"ok"}
Result Term: ok(pear)

 Orig. Term: error("not fruit")
       JSON: {"args":["not fruit"],"functor":"error"}
Result Term: error("not fruit")

 Orig. Term: error(apple)
       JSON: {"args":["apple"],"functor":"error"}
Result Term: error(apple)

 Orig. Term: sol([1, 2, 3, 4])
       JSON: [1,2,3,4]
Result Term: sol([1, 2, 3, 4])

 Orig. Term: sul([1, 1, 2, 2, 3, 3, 4, 4])
       JSON: [1,2,3,4]
Result Term: sul([4, 3, 2, 1])

 Orig. Term: two(2, two(1, empty, empty), three(3, 4, empty, empty, empty))
       JSON: [1,2,3,4]
Result Term: two(3, three(1, 2, empty, empty, empty), two(4, empty, empty))

 Orig. Term: ct(4, two(2, two(1, empty, empty), three(3, 4, empty, empty, empty)))
       JSON: [1,2,3,4]
Result Term: ct(4, two(3, three(1, 2, empty, empty, empty), two(4, empty, empty)))

 Orig. Term: [apple - "Apple", orange - "Orange", lemon - "Lemon"]
       JSON: [{"fst":"apple","snd":"Apple"},{"fst":"orange","snd":"Orange"},{"fst":"lemon","snd":"Lemon"}]
Result Term: [apple - "Apple", orange - "Orange", lemon - "Lemon"]

 Orig. Term: four(apple, "Apple", orange, "Orange", lemon, "Lemon", empty, empty, empty, empty)
       JSON: [{"fst":"apple","snd":"Apple"},{"fst":"orange","snd":"Orange"},{"fst":"lemon","snd":"Lemon"}]
Result Term: four(apple, "Apple", orange, "Orange", lemon, "Lemon", empty, empty, empty, empty)

 Orig. Term: bimap(four(apple, "Apple", orange, "Orange", lemon, "Lemon", empty, empty, empty, empty), four("Apple", apple, "Lemon", lemon, "Orange", orange, empty, empty, empty, empty))
       JSON: [{"fst":"apple","snd":"Apple"},{"fst":"orange","snd":"Orange"},{"fst":"lemon","snd":"Lemon"}]
Result Term: bimap(four(apple, "Apple", orange, "Orange", lemon, "Lemon", empty, empty, empty, empty), four("Apple", apple, "Lemon", lemon, "Orange", orange, empty, empty, empty, empty))

